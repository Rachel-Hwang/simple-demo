// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/consumer/service/v1/consumer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsumerClient is the client API for Consumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerClient interface {
	CreateConsumer(ctx context.Context, in *CreateConsumerReq, opts ...grpc.CallOption) (*CreateConsumerReply, error)
	UpdateConsumer(ctx context.Context, in *UpdateConsumerReq, opts ...grpc.CallOption) (*UpdateConsumerReply, error)
	DeleteConsumer(ctx context.Context, in *DeleteConsumerReq, opts ...grpc.CallOption) (*DeleteConsumerReply, error)
	GetConsumer(ctx context.Context, in *GetConsumerReq, opts ...grpc.CallOption) (*GetConsumerReply, error)
	ListConsumer(ctx context.Context, in *ListConsumerReq, opts ...grpc.CallOption) (*ListConsumerReply, error)
	CallProvider(ctx context.Context, in *CallProviderReq, opts ...grpc.CallOption) (*CallProviderReply, error)
}

type consumerClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerClient(cc grpc.ClientConnInterface) ConsumerClient {
	return &consumerClient{cc}
}

func (c *consumerClient) CreateConsumer(ctx context.Context, in *CreateConsumerReq, opts ...grpc.CallOption) (*CreateConsumerReply, error) {
	out := new(CreateConsumerReply)
	err := c.cc.Invoke(ctx, "/api.consumer.service.v1.Consumer/CreateConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) UpdateConsumer(ctx context.Context, in *UpdateConsumerReq, opts ...grpc.CallOption) (*UpdateConsumerReply, error) {
	out := new(UpdateConsumerReply)
	err := c.cc.Invoke(ctx, "/api.consumer.service.v1.Consumer/UpdateConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) DeleteConsumer(ctx context.Context, in *DeleteConsumerReq, opts ...grpc.CallOption) (*DeleteConsumerReply, error) {
	out := new(DeleteConsumerReply)
	err := c.cc.Invoke(ctx, "/api.consumer.service.v1.Consumer/DeleteConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) GetConsumer(ctx context.Context, in *GetConsumerReq, opts ...grpc.CallOption) (*GetConsumerReply, error) {
	out := new(GetConsumerReply)
	err := c.cc.Invoke(ctx, "/api.consumer.service.v1.Consumer/GetConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) ListConsumer(ctx context.Context, in *ListConsumerReq, opts ...grpc.CallOption) (*ListConsumerReply, error) {
	out := new(ListConsumerReply)
	err := c.cc.Invoke(ctx, "/api.consumer.service.v1.Consumer/ListConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) CallProvider(ctx context.Context, in *CallProviderReq, opts ...grpc.CallOption) (*CallProviderReply, error) {
	out := new(CallProviderReply)
	err := c.cc.Invoke(ctx, "/api.consumer.service.v1.Consumer/CallProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerServer is the server API for Consumer service.
// All implementations must embed UnimplementedConsumerServer
// for forward compatibility
type ConsumerServer interface {
	CreateConsumer(context.Context, *CreateConsumerReq) (*CreateConsumerReply, error)
	UpdateConsumer(context.Context, *UpdateConsumerReq) (*UpdateConsumerReply, error)
	DeleteConsumer(context.Context, *DeleteConsumerReq) (*DeleteConsumerReply, error)
	GetConsumer(context.Context, *GetConsumerReq) (*GetConsumerReply, error)
	ListConsumer(context.Context, *ListConsumerReq) (*ListConsumerReply, error)
	CallProvider(context.Context, *CallProviderReq) (*CallProviderReply, error)
	mustEmbedUnimplementedConsumerServer()
}

// UnimplementedConsumerServer must be embedded to have forward compatible implementations.
type UnimplementedConsumerServer struct {
}

func (UnimplementedConsumerServer) CreateConsumer(context.Context, *CreateConsumerReq) (*CreateConsumerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumer not implemented")
}
func (UnimplementedConsumerServer) UpdateConsumer(context.Context, *UpdateConsumerReq) (*UpdateConsumerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsumer not implemented")
}
func (UnimplementedConsumerServer) DeleteConsumer(context.Context, *DeleteConsumerReq) (*DeleteConsumerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsumer not implemented")
}
func (UnimplementedConsumerServer) GetConsumer(context.Context, *GetConsumerReq) (*GetConsumerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumer not implemented")
}
func (UnimplementedConsumerServer) ListConsumer(context.Context, *ListConsumerReq) (*ListConsumerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsumer not implemented")
}
func (UnimplementedConsumerServer) CallProvider(context.Context, *CallProviderReq) (*CallProviderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallProvider not implemented")
}
func (UnimplementedConsumerServer) mustEmbedUnimplementedConsumerServer() {}

// UnsafeConsumerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerServer will
// result in compilation errors.
type UnsafeConsumerServer interface {
	mustEmbedUnimplementedConsumerServer()
}

func RegisterConsumerServer(s grpc.ServiceRegistrar, srv ConsumerServer) {
	s.RegisterService(&Consumer_ServiceDesc, srv)
}

func _Consumer_CreateConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsumerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).CreateConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.consumer.service.v1.Consumer/CreateConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).CreateConsumer(ctx, req.(*CreateConsumerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_UpdateConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConsumerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).UpdateConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.consumer.service.v1.Consumer/UpdateConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).UpdateConsumer(ctx, req.(*UpdateConsumerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_DeleteConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsumerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).DeleteConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.consumer.service.v1.Consumer/DeleteConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).DeleteConsumer(ctx, req.(*DeleteConsumerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_GetConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).GetConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.consumer.service.v1.Consumer/GetConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).GetConsumer(ctx, req.(*GetConsumerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_ListConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsumerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).ListConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.consumer.service.v1.Consumer/ListConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).ListConsumer(ctx, req.(*ListConsumerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_CallProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallProviderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).CallProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.consumer.service.v1.Consumer/CallProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).CallProvider(ctx, req.(*CallProviderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Consumer_ServiceDesc is the grpc.ServiceDesc for Consumer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consumer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.consumer.service.v1.Consumer",
	HandlerType: (*ConsumerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConsumer",
			Handler:    _Consumer_CreateConsumer_Handler,
		},
		{
			MethodName: "UpdateConsumer",
			Handler:    _Consumer_UpdateConsumer_Handler,
		},
		{
			MethodName: "DeleteConsumer",
			Handler:    _Consumer_DeleteConsumer_Handler,
		},
		{
			MethodName: "GetConsumer",
			Handler:    _Consumer_GetConsumer_Handler,
		},
		{
			MethodName: "ListConsumer",
			Handler:    _Consumer_ListConsumer_Handler,
		},
		{
			MethodName: "CallProvider",
			Handler:    _Consumer_CallProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/consumer/service/v1/consumer.proto",
}
